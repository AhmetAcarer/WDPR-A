@model List<Chat>
    
    @foreach (var chat in @Model)
    {
        <div>
            @chat.Orthopedagogue.FirstName
            @chat.Subject
            @chat.Clients.First().Email
        </div>
    }
    
    

    <div class="d-flex flex-column align-items-stretch flex-shrink-0 text-white bg-dark" style="width: 380px;">
    <a href="#" class="d-flex align-items-center flex-shrink-0 p-3 link-white text-decoration-none border-bottom">
      <svg class="bi me-2" width="30" height="24"><use xlink:href="#bootstrap"></use></svg>
      <span class="fs-5 fw-semibold text-white">Chats</span>
    </a>
    @* @foreach moet hieronder *@
    <div class="list-group list-group-flush border-bottom scrollarea">
      <a href="#" class="list-group-item list-group-item-action py-3 lh-tight" style="background-color: #ececec" aria-current="true">
        <div class="d-flex w-100 align-items-center justify-content-between" >
          <strong class="mb-1">List group item heading</strong>
          @* Hieronder komt dag van laatste 'Then' *@
          <small>Wed</small> 
        </div>
        <div class="col-10 mb-1 small">Some placeholder content in a paragraph below the heading and date.</div>
      </a>
    </div>
  </div>

    

    <div class="container">
        <div class="row">&nbsp;</div>
        <div class="row">
            <div class="col-2">Message</div>
            <div class="col-4"><input type="text" id="messageInput" /></div>
        </div>
        <div class="row">&nbsp;</div>
        <div class="row">
            <div class="col-6">
                <input type="button" id="sendButton" value="Send Message" />
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <hr />
        </div>
    </div>
    <div class="row">
        <div class="col-6">
            <ul id="messagesList"></ul>
        </div>
    </div>
    
<script src="~/js/signalr/dist/browser/signalr.js"></script>
@* <script src="~/js/chat.js"></script> *@

<script>
"use strict";
var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();
//Disable the send button until connection is established.
document.getElementById("sendButton").disabled = true;

connection.on("ReceiveMessage", function (user, message) {
  var li = document.createElement("li");
  document.getElementById("messagesList").appendChild(li);
  // We can assign user-supplied strings to an element's textContent because it
  // is not interpreted as markup. If you're assigning in any other way, you
  // should be aware of possible script injection concerns.
  li.textContent = `${user} zegt ${message}`;
});

connection
  .start()
  .then(function () {
    document.getElementById("sendButton").disabled = false;
  })
  .catch(function (err) {
    return console.error(err.toString());
  });

document
  .getElementById("sendButton")
  .addEventListener("click", function (event) {
    var text = document.getElementById("messageInput").value;
    var roomId = "" + @Html.Raw(Model.FirstOrDefault().RoomId);
    connection.invoke("SendMessage", text, roomId).catch(function (err) {
      return console.error(err.toString());
    });
    event.preventDefault();
  });

  </script>